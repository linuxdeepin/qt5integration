/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./qt5integration/platformthemeplugin/xmls/com.deepin.filemanager.filedialog.xml -a ./qt5integration/toolGenerate/qdbusxml2cpp/com.deepin.filemanager.filedialogAdaptor -i ./qt5integration/toolGenerate/qdbusxml2cpp/com.deepin.filemanager.filedialog.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./qt5integration/toolGenerate/qdbusxml2cpp/com.deepin.filemanager.filedialogAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FiledialogAdaptor
 */

FiledialogAdaptor::FiledialogAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

FiledialogAdaptor::~FiledialogAdaptor()
{
    // destructor
}

int FiledialogAdaptor::acceptMode() const
{
    // get the value of property acceptMode
    return qvariant_cast< int >(parent()->property("acceptMode"));
}

void FiledialogAdaptor::setAcceptMode(int value)
{
    // set the value of property acceptMode
    parent()->setProperty("acceptMode", QVariant::fromValue(value));
}

QString FiledialogAdaptor::directory() const
{
    // get the value of property directory
    return qvariant_cast< QString >(parent()->property("directory"));
}

void FiledialogAdaptor::setDirectory(const QString &value)
{
    // set the value of property directory
    parent()->setProperty("directory", QVariant::fromValue(value));
}

QString FiledialogAdaptor::directoryUrl() const
{
    // get the value of property directoryUrl
    return qvariant_cast< QString >(parent()->property("directoryUrl"));
}

void FiledialogAdaptor::setDirectoryUrl(const QString &value)
{
    // set the value of property directoryUrl
    parent()->setProperty("directoryUrl", QVariant::fromValue(value));
}

int FiledialogAdaptor::filter() const
{
    // get the value of property filter
    return qvariant_cast< int >(parent()->property("filter"));
}

void FiledialogAdaptor::setFilter(int value)
{
    // set the value of property filter
    parent()->setProperty("filter", QVariant::fromValue(value));
}

int FiledialogAdaptor::heartbeatInterval() const
{
    // get the value of property heartbeatInterval
    return qvariant_cast< int >(parent()->property("heartbeatInterval"));
}

void FiledialogAdaptor::setHeartbeatInterval(int value)
{
    // set the value of property heartbeatInterval
    parent()->setProperty("heartbeatInterval", QVariant::fromValue(value));
}

bool FiledialogAdaptor::hideOnAccept() const
{
    // get the value of property hideOnAccept
    return qvariant_cast< bool >(parent()->property("hideOnAccept"));
}

void FiledialogAdaptor::setHideOnAccept(bool value)
{
    // set the value of property hideOnAccept
    parent()->setProperty("hideOnAccept", QVariant::fromValue(value));
}

QStringList FiledialogAdaptor::nameFilters() const
{
    // get the value of property nameFilters
    return qvariant_cast< QStringList >(parent()->property("nameFilters"));
}

void FiledialogAdaptor::setNameFilters(const QStringList &value)
{
    // set the value of property nameFilters
    parent()->setProperty("nameFilters", QVariant::fromValue(value));
}

int FiledialogAdaptor::viewMode() const
{
    // get the value of property viewMode
    return qvariant_cast< int >(parent()->property("viewMode"));
}

void FiledialogAdaptor::setViewMode(int value)
{
    // set the value of property viewMode
    parent()->setProperty("viewMode", QVariant::fromValue(value));
}

bool FiledialogAdaptor::windowActive() const
{
    // get the value of property windowActive
    return qvariant_cast< bool >(parent()->property("windowActive"));
}

uint FiledialogAdaptor::windowFlags() const
{
    // get the value of property windowFlags
    return qvariant_cast< uint >(parent()->property("windowFlags"));
}

void FiledialogAdaptor::setWindowFlags(uint value)
{
    // set the value of property windowFlags
    parent()->setProperty("windowFlags", QVariant::fromValue(value));
}

void FiledialogAdaptor::accept()
{
    // handle method call com.deepin.filemanager.filedialog.accept
    QMetaObject::invokeMethod(parent(), "accept");
}

void FiledialogAdaptor::activateWindow()
{
    // handle method call com.deepin.filemanager.filedialog.activateWindow
    QMetaObject::invokeMethod(parent(), "activateWindow");
}

void FiledialogAdaptor::addCustomWidget(int type, const QString &data)
{
    // handle method call com.deepin.filemanager.filedialog.addCustomWidget
    QMetaObject::invokeMethod(parent(), "addCustomWidget", Q_ARG(int, type), Q_ARG(QString, data));
}

void FiledialogAdaptor::addDisableUrlScheme(const QString &type)
{
    // handle method call com.deepin.filemanager.filedialog.addDisableUrlScheme
    QMetaObject::invokeMethod(parent(), "addDisableUrlScheme", Q_ARG(QString, type));
}

QMap<QString,QVariant> FiledialogAdaptor::allCustomWidgetsValue(int type)
{
    // handle method call com.deepin.filemanager.filedialog.allCustomWidgetsValue
    QMap<QString,QVariant> values;
    QMetaObject::invokeMethod(parent(), "allCustomWidgetsValue", Q_RETURN_ARG(QMap<QString,QVariant>, values), Q_ARG(int, type));
    return values;
}

void FiledialogAdaptor::beginAddCustomWidget()
{
    // handle method call com.deepin.filemanager.filedialog.beginAddCustomWidget
    QMetaObject::invokeMethod(parent(), "beginAddCustomWidget");
}

void FiledialogAdaptor::deleteLater()
{
    // handle method call com.deepin.filemanager.filedialog.deleteLater
    QMetaObject::invokeMethod(parent(), "deleteLater");
}

void FiledialogAdaptor::endAddCustomWidget()
{
    // handle method call com.deepin.filemanager.filedialog.endAddCustomWidget
    QMetaObject::invokeMethod(parent(), "endAddCustomWidget");
}

QDBusVariant FiledialogAdaptor::getCustomWidgetValue(int type, const QString &text)
{
    // handle method call com.deepin.filemanager.filedialog.getCustomWidgetValue
    QDBusVariant value;
    QMetaObject::invokeMethod(parent(), "getCustomWidgetValue", Q_RETURN_ARG(QDBusVariant, value), Q_ARG(int, type), Q_ARG(QString, text));
    return value;
}

void FiledialogAdaptor::hide()
{
    // handle method call com.deepin.filemanager.filedialog.hide
    QMetaObject::invokeMethod(parent(), "hide");
}

QString FiledialogAdaptor::labelText(int label)
{
    // handle method call com.deepin.filemanager.filedialog.labelText
    QString text;
    QMetaObject::invokeMethod(parent(), "labelText", Q_RETURN_ARG(QString, text), Q_ARG(int, label));
    return text;
}

void FiledialogAdaptor::makeHeartbeat()
{
    // handle method call com.deepin.filemanager.filedialog.makeHeartbeat
    QMetaObject::invokeMethod(parent(), "makeHeartbeat");
}

void FiledialogAdaptor::open()
{
    // handle method call com.deepin.filemanager.filedialog.open
    QMetaObject::invokeMethod(parent(), "open");
}

int FiledialogAdaptor::options()
{
    // handle method call com.deepin.filemanager.filedialog.options
    int options;
    QMetaObject::invokeMethod(parent(), "options", Q_RETURN_ARG(int, options));
    return options;
}

void FiledialogAdaptor::reject()
{
    // handle method call com.deepin.filemanager.filedialog.reject
    QMetaObject::invokeMethod(parent(), "reject");
}

void FiledialogAdaptor::selectFile(const QString &filename)
{
    // handle method call com.deepin.filemanager.filedialog.selectFile
    QMetaObject::invokeMethod(parent(), "selectFile", Q_ARG(QString, filename));
}

void FiledialogAdaptor::selectNameFilter(const QString &filter)
{
    // handle method call com.deepin.filemanager.filedialog.selectNameFilter
    QMetaObject::invokeMethod(parent(), "selectNameFilter", Q_ARG(QString, filter));
}

void FiledialogAdaptor::selectNameFilterByIndex(int index)
{
    // handle method call com.deepin.filemanager.filedialog.selectNameFilterByIndex
    QMetaObject::invokeMethod(parent(), "selectNameFilterByIndex", Q_ARG(int, index));
}

void FiledialogAdaptor::selectUrl(const QString &url)
{
    // handle method call com.deepin.filemanager.filedialog.selectUrl
    QMetaObject::invokeMethod(parent(), "selectUrl", Q_ARG(QString, url));
}

QStringList FiledialogAdaptor::selectedFiles()
{
    // handle method call com.deepin.filemanager.filedialog.selectedFiles
    QStringList filelist;
    QMetaObject::invokeMethod(parent(), "selectedFiles", Q_RETURN_ARG(QStringList, filelist));
    return filelist;
}

QString FiledialogAdaptor::selectedNameFilter()
{
    // handle method call com.deepin.filemanager.filedialog.selectedNameFilter
    QString filter;
    QMetaObject::invokeMethod(parent(), "selectedNameFilter", Q_RETURN_ARG(QString, filter));
    return filter;
}

int FiledialogAdaptor::selectedNameFilterIndex()
{
    // handle method call com.deepin.filemanager.filedialog.selectedNameFilterIndex
    int index;
    QMetaObject::invokeMethod(parent(), "selectedNameFilterIndex", Q_RETURN_ARG(int, index));
    return index;
}

QStringList FiledialogAdaptor::selectedUrls()
{
    // handle method call com.deepin.filemanager.filedialog.selectedUrls
    QStringList urllist;
    QMetaObject::invokeMethod(parent(), "selectedUrls", Q_RETURN_ARG(QStringList, urllist));
    return urllist;
}

void FiledialogAdaptor::setAllowMixedSelection(bool on)
{
    // handle method call com.deepin.filemanager.filedialog.setAllowMixedSelection
    QMetaObject::invokeMethod(parent(), "setAllowMixedSelection", Q_ARG(bool, on));
}

void FiledialogAdaptor::setCurrentInputName(const QString &name)
{
    // handle method call com.deepin.filemanager.filedialog.setCurrentInputName
    QMetaObject::invokeMethod(parent(), "setCurrentInputName", Q_ARG(QString, name));
}

void FiledialogAdaptor::setFileMode(int fileMode)
{
    // handle method call com.deepin.filemanager.filedialog.setFileMode
    QMetaObject::invokeMethod(parent(), "setFileMode", Q_ARG(int, fileMode));
}

void FiledialogAdaptor::setLabelText(int label, const QString &text)
{
    // handle method call com.deepin.filemanager.filedialog.setLabelText
    QMetaObject::invokeMethod(parent(), "setLabelText", Q_ARG(int, label), Q_ARG(QString, text));
}

void FiledialogAdaptor::setOption(int option, bool on)
{
    // handle method call com.deepin.filemanager.filedialog.setOption
    QMetaObject::invokeMethod(parent(), "setOption", Q_ARG(int, option), Q_ARG(bool, on));
}

void FiledialogAdaptor::setOptions(int options)
{
    // handle method call com.deepin.filemanager.filedialog.setOptions
    QMetaObject::invokeMethod(parent(), "setOptions", Q_ARG(int, options));
}

void FiledialogAdaptor::setWindowTitle(const QString &title)
{
    // handle method call com.deepin.filemanager.filedialog.setWindowTitle
    QMetaObject::invokeMethod(parent(), "setWindowTitle", Q_ARG(QString, title));
}

void FiledialogAdaptor::show()
{
    // handle method call com.deepin.filemanager.filedialog.show
    QMetaObject::invokeMethod(parent(), "show");
}

bool FiledialogAdaptor::testOption(int option)
{
    // handle method call com.deepin.filemanager.filedialog.testOption
    bool on;
    QMetaObject::invokeMethod(parent(), "testOption", Q_RETURN_ARG(bool, on), Q_ARG(int, option));
    return on;
}

qulonglong FiledialogAdaptor::winId()
{
    // handle method call com.deepin.filemanager.filedialog.winId
    qulonglong windowId;
    QMetaObject::invokeMethod(parent(), "winId", Q_RETURN_ARG(qulonglong, windowId));
    return windowId;
}

